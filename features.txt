
Feature 1: Namespace Create
Create a namespace with appropriate labels, default quotas, and optionally enable features like service mesh and backups.

User Stories:
Story 1.1: As a user, I want to request a namespace with standard quotas, with default network policies, rolebindings and option to enable service mesh and backups

Story 1.2: As a user, I want to request a namespace with custom quotas, with default network policies, rolebindings and option to enable service mesh and backups.

Story 1.3: As a platform engineer, I want a Tekton pipeline to generate the namespace configuration manifests and push a Git PR that will be auto merged for standard quotarequests.

Story 1.4: As a platform engineer, I want a Tekton pipeline to generate the namespace configuration manifests and push a Git PR for custom quota requests.

Story 1.5: As a platform engineer, I want to create a Jira issue when a custom namespace request is made to track its approval and merge.

Feature 2: Namespace Update
Update an existing namespace's labels (i.e enable/disable service mesh or backups) and / or quotas

User Stories:
Story 2.1: As a user, I want to submit a request to enable or disable backups/service mesh for a namespace.

Story 2.2: As a user, I want to update the resource quota of an existing namespace. The resource quota sizes can be standard or custom

Story 2.3: As a platform engineer, I want a Tekton pipeline to generate nameespace configuration manifests with appropriate labels and push a Git PR that will be auto merged.

Story 2.4: As a platform engineer, I want a Tekton pipeline to generate resource quota configuration manifests and push a Git PR that will be auto merged for Standard quota requests.

Story 2.5: As a platform engineer, I want a Tekton pipeline to generate resource quota configuration manifests and push a Git PR for Custom quota requests..

Feature 3: SMB Static PV Management
Create and Update static SMB-based persistent volumes.

User Stories:
Story 3.1: As a user, I want to request the creation of a static SMB PV with specified parameters.

Story 3.2: As a user, I want to update parameters of an existing static SMB PV.

Story 3.3: As a platform engineer, I want a Tekton pipeline to create/update static SMB PV configuration manifests and push a Git PR.

Story 3.4: As a platform engineer, I want to create a Jira issue when a static SMB PV request is made to track its approval and merge.


Feature 4: Status and Error Notifications
Notify the consumers of the workflows regarding the status with applicable additional detailsand errors.

User Stories:
Story 4.1: As a platform engineer, I want to send a notification back to the consumer with Status, Git PR and JIRA Links for namespace and PV requests.

Story 4.2: As a platform engineer, I want to send a notification back to the consumer when any error occurs.













# Initialize error array
errors=()

# Validate NAMESPACE_NAME
[[ "${#NAMESPACE_NAME}" -le 63 ]] || errors+=("NAMESPACE_NAME exceeds 63 characters")
[[ "$NAMESPACE_NAME" =~ ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$ ]] || errors+=("NAMESPACE_NAME is not DNS-1123 compliant")

# APP_ID: ≤ 5 alphanumeric
[[ "$APP_ID" =~ ^[a-zA-Z0-9]{1,5}$ ]] || errors+=("APP_ID must be ≤ 5 alphanumeric characters")

# LOB: ≤ 6 alphanumeric
[[ "$LOB" =~ ^[a-zA-Z0-9]{1,6}$ ]] || errors+=("LOB must be ≤ 6 alphanumeric characters")

# CLUSTER_ENV: lab, prod, nonprod
[[ "$CLUSTER_ENV" =~ ^(lab|prod|nonprod)$ ]] || errors+=("CLUSTER_ENV must be lab, prod, or nonprod")

# CI_ENVIRONMNET: lab, dev, uat
[[ "$CI_ENVIRONMNET" =~ ^(lab|dev|uat)$ ]] || errors+=("CI_ENVIRONMNET must be lab, dev, or uat")

# REQUESTS_CPU: integer ≤ 9999
[[ "$REQUESTS_CPU" =~ ^[0-9]+$ ]] && (( REQUESTS_CPU <= 9999 )) || errors+=("REQUESTS_CPU must be integer ≤ 9999")

# LIMITS_CPU: integer ≥ REQUESTS_CPU
[[ "$LIMITS_CPU" =~ ^[0-9]+$ ]] && (( LIMITS_CPU >= REQUESTS_CPU )) || errors+=("LIMITS_CPU must be integer ≥ REQUESTS_CPU")

# MAX_PODS: integer ≤ 999
[[ "$MAX_PODS" =~ ^[0-9]+$ ]] && (( MAX_PODS <= 999 )) || errors+=("MAX_PODS must be integer ≤ 999")

# Memory value parsing helpers
parse_mem() { echo "$1" | sed -E 's/([0-9]+)(Mi|Gi)/\1/'; }
get_unit()   { echo "$1" | sed -E 's/[0-9]+(Mi|Gi)/\1/'; }

# Validate REQUESTS_MEMORY
if [[ "$REQUESTS_MEMORY" =~ ^[0-9]+(Mi|Gi)$ ]]; then
  R_MEM_VAL=$(parse_mem "$REQUESTS_MEMORY")
  R_MEM_UNIT=$(get_unit "$REQUESTS_MEMORY")
  (( R_MEM_VAL <= 9999 )) || errors+=("REQUESTS_MEMORY must be ≤ 9999")
else
  errors+=("REQUESTS_MEMORY must be numeric with Mi or Gi suffix")
fi

# Validate LIMITS_MEMORY
if [[ "$LIMITS_MEMORY" =~ ^[0-9]+(Mi|Gi)$ ]]; then
  L_MEM_VAL=$(parse_mem "$LIMITS_MEMORY")
  L_MEM_UNIT=$(get_unit "$LIMITS_MEMORY")
  if [[ "$R_MEM_UNIT" == "$L_MEM_UNIT" ]]; then
    (( L_MEM_VAL >= R_MEM_VAL )) || errors+=("LIMITS_MEMORY must be ≥ REQUESTS_MEMORY")
  else
    [[ "$L_MEM_UNIT" == "Gi" ]] || errors+=("LIMITS_MEMORY must be ≥ REQUESTS_MEMORY in compatible unit")
  fi
else
  errors+=("LIMITS_MEMORY must be numeric with Mi or Gi suffix")
fi

# ENABLE_BACKUP and ISTIO_DISCOVERY: enabled or disabled
[[ "$ENABLE_BACKUP" =~ ^(enabled|disabled)$ ]] || errors+=("ENABLE_BACKUP must be enabled or disabled")
[[ "$ISTIO_DISCOVERY" =~ ^(enabled|disabled)$ ]] || errors+=("ISTIO_DISCOVERY must be enabled or disabled")

# Print JSON response
if [[ ${#errors[@]} -eq 0 ]]; then
  jq -n --arg status "success" '{status: $status, message: "All validations passed."}'
else
  jq -n --arg status "error" --argjson messages "$(printf '%s\n' "${errors[@]}" | jq -R . | jq -s .)" \
    '{status: $status, errors: $messages}'
fi